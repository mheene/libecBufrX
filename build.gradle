plugins {
    id 'war'
    id 'org.gretty' version '2.2.0'
    id 'org.sonarqube' version '2.6'
}


repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
}

apply plugin: "eclipse"

apply plugin: 'pmd'

apply plugin: 'checkstyle'

checkstyle {
	   toolVersion "8.11"
}


apply plugin: 'findbugs'

findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
//    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}


/*
task log4j (type: Copy) {
     from 'src/main/webapp/WEB-INF/resource/log4j2.xml'
     into 'build/classes/java/main'
}
*/


/*
project.afterEvaluate {
   tasks.appRun.dependsOn log4j
}
*/

gretty {

  // supported values:
  // 'jetty7', 'jetty8', 'jetty9', 'jetty93', 'jetty94', 'tomcat7', 'tomcat8', 'tomcat9'
  servletContainer = 'tomcat9'
  //integrationTestTask = 'integrationTest'	
}

/*
task curl(type: Exec) {
  executable "bash"
  args "-c", "src/test/sh/poster_01_json.sh"
}

task integrationTest(dependsOn appRun) {
     tasks.curl.execute()  
}
*/

dependencies {
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.google.guava:guava:25.1-jre'	
    compile 'commons-fileupload:commons-fileupload:1.3.3'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.apache.commons:commons-text:1.4'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    compile 'org.apache.taglibs:taglibs-standard-impl:1.2.5'
    compile 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'
    compile 'org.apache.taglibs:taglibs-standard-spec:1.2.5'	
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0' 
    testCompile 'org.mockito:mockito-core:2.7.19'
    testCompile 'junit:junit:4.12'
}

/*
task stage(dependsOn: ['build', 'clean']) {
     build.mustRunAfter clean
}

task copyToLib(type: Copy) {
    into "$buildDir/lib"
    from(configurations.compile)
}

stage.dependsOn(copyToLib)
*/